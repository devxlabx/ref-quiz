name: CI Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline sur un push vers la branche principale

jobs:
  maven:
    runs-on: ubuntu-latest
    name: Build avec Maven
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code du repository
      - name: Installer Java JDK 11 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'  # Utiliser Temurin, la nouvelle distribution JDK
      - name: Compiler et construire avec Maven
        run: mvn clean install  # Construire le projet avec Maven

  sonarqube:
    runs-on: ubuntu-latest
    needs: maven  # Ce job dépend du succès du job Maven
    name: Analyse avec SonarQube
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code du repository
      - name: Installer SonarQube Scanner
        uses: SonarSource/sonarcloud-github-action@v1
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}  # Ton token d'authentification SonarQube
      - name: Lancer l'analyse SonarQube
        run: |
          sonar-scanner -Dsonar.projectKey=my_project_key -Dsonar.sources=./src  # Ajuste les paramètres selon ton projet

  codeql:
    runs-on: ubuntu-latest
    needs: sonarqube  # Ce job dépend du succès du job SonarQube
    name: Analyse avec CodeQL
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code du repository
      - name: Configurer CodeQL
        uses: github/codeql-action/setup@v2  # Configurer l'action CodeQL
      - name: Lancer l'analyse CodeQL
        uses: github/codeql-action/analyze@v2
        with:
          languages: java  # Adapter le langage selon ton projet (java, python, etc.)
