name: CI Pipeline

on:
  push:
    branches:
      - main  # D√©clenche le pipeline sur un push vers la branche principale

jobs:
  maven:
    runs-on: ubuntu-latest
    name: üî® Build avec Maven
    steps:
      - name: üëÖ Checkout code
        uses: actions/checkout@v2  # R√©cup√©rer le code du repository
      
      - name: ‚òï Installer Java JDK 17 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: üîß Compiler et construire avec Maven
        run: mvn -f refquiz-api/pom.xml clean install  # Ex√©cuter Maven dans le bon dossier

  sonarqube:
    runs-on: ubuntu-latest
    needs: maven  # Ce job d√©pend du succ√®s du job Maven
    name: üîç Analyse avec SonarQube
    steps:
      - name: üëÖ Checkout code
        uses: actions/checkout@v4  # R√©cup√©rer le code du repository
      
      - name: ‚òï Installer Java JDK 17 (Temurin)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: üìö Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: üìö Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven
      
      - name: üåü Compiler le projet
        working-directory: refquiz-api
        run: mvn clean verify
      
      - name: üìä Analyser avec SonarQube
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=refquiz-api/src/main/java
            -Dsonar.tests=refquiz-api/src/test/java
            -Dsonar.java.binaries=refquiz-api/target/classes
            -Dsonar.junit.reportPaths=refquiz-api/target/surefire-reports
            -Dsonar.coverage.jacoco.xmlReportPaths=refquiz-api/target/site/jacoco/jacoco.xml

  codeql:
    runs-on: ubuntu-latest
    needs: sonarqube  # Ce job d√©pend du succ√®s du job SonarQube
    name: üîé Analyse avec CodeQL
    permissions:
      security-events: write  # Permission pour √©crire les √©v√©nements de s√©curit√©
      packages: read  # Permission pour lire les packs CodeQL
      actions: read  # Permission pour lire les actions
      contents: read  # Permission pour lire le contenu du d√©p√¥t
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java  # Seul Java est analys√© ici
            build-mode: autobuild  # Mode de construction automatique pour Java
    steps:
      - name: üëÖ Checkout repository
        uses: actions/checkout@v4
      
      - name: üõ†Ô∏è Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
      
      # Si le mode de construction est 'manual', sp√©cifier les commandes de build.
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'Remplacez cette section par les commandes de construction de votre projet.'
          echo 'Par exemple : mvn clean install'
          exit 1
      
      - name: ‚ú® Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"  # Sp√©cifie que l'analyse est pour Java
