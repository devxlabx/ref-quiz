name: CI Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline sur un push vers la branche principale

jobs:
  maven:
    runs-on: ubuntu-latest
    name: Build avec Maven
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code du repository
      - name: Installer Java JDK 17 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'  # Utiliser Temurin, la distribution JDK 17
      - name: Compiler et construire avec Maven
        run: |
          cd refquiz-api
          mvn clean install
      - name: Renommer le JAR généré
        run: |
          cd refquiz-api/target
          JAR_FILE=$(ls refquiz-api-*.jar | head -n 1)
          mv "$JAR_FILE" refquiz-api.jar

  sonarqube:
    runs-on: ubuntu-latest
    needs: maven  # Ce job dépend du succès du job Maven
    name: Analyse avec SonarQube
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code du repository
      - name: Installer Java JDK 17 (Temurin)
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Lancer l'analyse SonarQube
        run: |
          cd refquiz-api
          mvn sonar:sonar \
            -Dsonar.projectKey=my_project_key \
            -Dsonar.organization=my_org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}

  codeql:
    runs-on: ubuntu-latest
    needs: sonarqube  # Ce job dépend du succès du job SonarQube
    name: Analyse avec CodeQL
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code du repository
      - name: Configurer CodeQL
        uses: github/codeql-action/setup@v2  # Configurer l'action CodeQL
      - name: Lancer l'analyse CodeQL
        run: |
          cd refquiz-api
          github/codeql-action/analyze@v2 --languages=java
